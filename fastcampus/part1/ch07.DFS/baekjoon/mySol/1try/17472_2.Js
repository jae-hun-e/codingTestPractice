// const input = [
//     "7 8",
//     "0 0 0 0 0 0 1 1",
//     "1 1 0 0 0 0 1 1",
//     "1 1 0 0 0 0 0 0",
//     "1 1 0 0 0 1 1 0",
//     "0 0 0 0 0 1 1 0",
//     "0 0 0 0 0 0 0 0",
//     "1 1 1 1 1 1 1 1",
// ]; //9

// const input = [
//     "7 8",
//     "0 0 0 1 1 0 0 0",
//     "0 0 0 1 1 0 0 0",
//     "1 1 0 0 0 0 1 1",
//     "1 1 0 0 0 0 1 1",
//     "1 1 0 0 0 0 0 0",
//     "0 0 0 0 0 0 0 0",
//     "1 1 1 1 1 1 1 1",
// ]; //10

// const input = [
//     "7 8",
//     "1 0 0 1 1 1 0 0",
//     "0 0 1 0 0 0 1 1",
//     "0 0 1 0 0 0 1 1",
//     "0 0 1 1 1 0 0 0",
//     "0 0 0 0 0 0 0 0",
//     "0 1 1 1 0 0 0 0",
//     "1 1 1 1 1 1 0 0",
// ]; // 9

// const input = [
//     "7 7",
//     "1 1 1 0 1 1 1",
//     "1 1 1 0 1 1 1",
//     "1 1 1 0 1 1 1",
//     "0 0 0 0 0 0 0",
//     "1 1 1 0 1 1 1",
//     "1 1 1 0 1 1 1",
//     "1 1 1 0 1 1 1",
// ]; // -1

// const input = [
//     "7 8",
//     "1 1 1 1 1 1 1 1",
//     "0 0 0 0 0 0 0 1",
//     "1 1 1 1 1 1 1 1",
//     "0 0 0 0 0 0 0 1",
//     "1 0 0 0 0 0 0 1",
//     "1 0 0 0 0 0 0 1",
//     "1 0 1 1 1 1 1 1",
// ]; // 6

// const input = ["4 6", "0 1 1 0 1 1", "1 0 1 0 0 1", "1 0 1 1 0 0", "1 0 1 1 1 0"]; // -1

// const input = ["2 8", "1 0 0 0 1 0 1 0", "1 1 1 1 1 0 1 0"]; // -1

// const input = ["4 4", "0 1 0 1", "1 0 0 1", "1 0 0 1", "1 1 1 1"]; // 2
// const input = ["7 3", "1 1 1", "0 1 1", "0 0 1", "0 0 0", "0 1 0", "0 1 0", "1 0 1"]; // 10
// const input = ["2 5", "1 0 0 1 0", "1 0 0 0 1"]; // 5
// const input = [
//     "6 6",
//     "1 1 1 1 1 1",
//     "0 0 0 0 0 0",
//     "1 1 1 0 1 0",
//     "0 1 0 1 0 1",
//     "0 0 0 0 0 0",
//     "1 1 1 1 1 1",
// ]; // -1
// const input = [
//     "8 8",
//     "1 1 1 1 1 1 1 1",
//     "1 0 0 0 0 0 0 1",
//     "1 0 0 0 0 0 0 1",
//     "1 0 0 1 1 0 0 1",
//     "1 0 0 0 0 0 0 1",
//     "1 0 0 0 0 0 0 1",
//     "1 0 0 0 0 0 0 1",
//     "1 1 1 1 1 1 1 1",
// ]; // 2

// const input = ["2 5", "1 0 0 0 0", "0 0 0 1 0"]; // -1

// const input = [
//     "6 6",
//     "1 1 1 1 1 1",
//     "0 0 0 0 0 0",
//     "1 1 1 0 1 0",
//     "0 1 0 1 0 1",
//     "0 0 0 0 0 0",
//     "1 1 1 1 1 1",
// ]; // -1

// const input = [
//     "8 8",
//     "0 0 0 1 1 1 1 0",
//     "0 1 1 1 1 0 1 0",
//     "0 1 0 1 1 1 0 0",
//     "0 1 0 0 0 1 0 0",
//     "0 0 0 1 0 0 1 0",
//     "0 0 0 0 0 1 0 0",
//     "0 1 1 1 0 0 0 0",
//     "0 1 0 0 0 1 0 0",
// ]; // -1

// 찾았다...!
// const input = [
//     "10 10",
//     "0 0 0 1 1 0 0 0 0 0",
//     "0 0 0 1 0 0 0 0 0 1",
//     "0 0 0 1 1 0 0 0 0 0",
//     "0 0 0 1 1 0 0 0 0 0",
//     "1 0 0 1 0 0 0 0 0 1",
//     "0 0 0 1 1 0 0 0 0 0",
//     "0 0 0 1 1 0 0 0 0 0",
//     "0 0 0 0 0 0 0 0 0 0",
//     "0 0 0 0 0 0 0 0 0 1",
//     "0 0 1 1 1 1 0 0 1 1",
// ]; // 11
// const input = [
//     "9 6",
//     "0 0 0 0 1 0",
//     "0 0 0 0 0 0",
//     "0 1 0 0 0 1",
//     "0 0 0 0 0 0",
//     "0 0 0 0 0 0",
//     "0 1 0 0 1 1",
//     "0 0 0 0 0 0",
//     "0 0 0 0 0 0",
//     "0 1 0 0 0 0",
// ]; // 12

// const input = require('fs').readFileSync('dev/stdin').toString().trim().split('\n')

const [n, m] = input[0].split(" ").map(Number);
const graph = [];
for (let i = 1; i <= n; i++) graph.push(input[i].split(" ").map(Number));

const dx = [-1, 1, 0, 0],
    dy = [0, 0, -1, 1];

// 1. 섬 표시
const visited = Array.from({ length: n }, () => new Array(m).fill(false));
const dfs = (y, x, select, cnt) => {
    visited[y][x] = true;
    select.push([y, x]);
    graph[y][x] = cnt;

    for (let i = 0; i < 4; i++) {
        const nx = x + dx[i],
            ny = y + dy[i];

        if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
        if (!visited[ny][nx] && graph[ny][nx]) dfs(ny, nx, select, cnt);
    }
};

let cnt = 0;
const selects = [];
for (let i = 0; i < n; i++) {
    for (let j = 0; j < m; j++) {
        if (!visited[i][j] && graph[i][j]) {
            cnt++;

            const select = [];
            dfs(i, j, select, cnt);
            selects.push(select);
        }
    }
}
// console.log("graph", graph);
// console.log("selects", selects);
// console.log(cnt);

// 2. 다리 만들기
const routes = Array.from({ length: cnt + 1 }, () => []);

// 같은 방향으로 다음 섬갈때까지 만나기
const route = (y, x, i, num) => {
    let dep = 0;
    while (++dep) {
        const nx = x + dx[i],
            ny = y + dy[i]; // 미친놈아 제발;;;

        if (nx < 0 || nx >= m || ny < 0 || ny >= n) break;
        // console.log("num", num);
        // console.log("y,x, ny,nx", y, x, ny, nx);

        if (graph[ny][nx]) {
            if (graph[ny][nx] !== num && --dep >= 2) {
                // console.log("graph[ny][nx], num, dep", graph[ny][nx], num, dep);
                routes[num].push([graph[ny][nx], dep]);
            }
            break;
        }

        [x, y] = [nx, ny];
    }
};

selects.forEach((select, num) => {
    select.forEach((item) => {
        const [y, x] = item;

        for (let i = 0; i < 4; i++) {
            route(y, x, i, num + 1);
        }
    });
});

// console.log("routes", routes);

routes.forEach((line) => line.sort((a, b) => a[1] - b[1]));
// console.log("routes", routes);
// 3. 브르투포스

const total = (cur, sum, area) => {
    area[cur] = true;

    for (const [next, dep] of routes[cur]) {
        if (!area[next]) {
            sum = total(next, sum + dep, area);
        }
    }
    return sum;
};

let min = 1e9;
for (let i = 1; i <= cnt; i++) {
    const area = new Array(cnt + 1).fill(false);
    const tmp = total(i, 0, area);

    if (area.filter((v) => !v).length === 1) min = Math.min(min, tmp);
}

console.log(min === 1e9 ? -1 : min);

// 3. 최소신장트리를 사용해야함
