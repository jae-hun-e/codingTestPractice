// const input = [
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 1 2 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0",
//   "0 0 1 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 1 2 2 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
// ];

// const input = [
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 1 0 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0",
//   "0 1 1 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0",
//   "0 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0",
//   "0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
//   "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
// ];

const input = [
  "0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
  "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0",
];

// const input = require("fs").readFileSync("/dev/stdin").toString().trim().split("\n");

const graph = input.map((line) => line.split(" ").map(Number));
// const visited = Array.from({ length: 19 }, () => new Array(19).fill(false));

const dx = [1, 0, 1, 1],
  dy = [0, 1, 1, -1];

let ans = 0;
let location = "";

const dfs = (y, x, k, cnt) => {
  // visited[y][x] = true;

  const nx = x + dx[k];
  const ny = y + dy[k];
  // console.log("y,x,ny,nx", y, x, ny, nx);

  if (cnt === 5) {
    if (nx < 0 || ny < 0 || nx >= 19 || ny >= 19) return graph[y][x];
    return graph[ny][nx] === graph[y][x] ? 0 : graph[y][x];
  }

  if (nx < 0 || ny < 0 || nx >= 19 || ny >= 19) return 0;
  // if (visited[ny][nx]) return 0;

  if (graph[ny][nx] === graph[y][x]) {
    // console.log(y, x, ny, nx, cnt);
    return dfs(ny, nx, k, cnt + 1);
  }

  return 0;
};

outer: for (let j = 0; j < 19; j++) {
  for (let i = 0; i < 19; i++) {
    if (graph[j][i]) {
      // console.log(j, i, graph[j][i]);
      for (let k = 0; k < 4; k++) {
        ans = dfs(j, i, k, 1);
        // visited[j][i] = false;

        if (ans) {
          const px = i - dx[k];
          const py = j - dy[k];
          if (px < 0 || py < 0 || px >= 19 || py >= 19) {
            location = [j + 1, i + 1];
            break outer;
          }

          if (graph[j][i] !== graph[py][px]) {
            location = [j + 1, i + 1];
            break outer;
          }
        }
      }
      // visited[j][i] = true;
    }
  }
}

console.log(ans);
location && console.log(location.join(" "));
